/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzle;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.util.List;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.CropImageFilter;
import java.awt.image.FilteredImageSource;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author dell
 */
public class puzzleAna extends javax.swing.JFrame {

    private BufferedImage source;
    private BufferedImage resized;
    private ArrayList<Integer> pixelList;
    private ArrayList<Integer> piecesList;
    private Image image;
    private int width, height;

    private List<JButton> buttons;
    private List<Point> pointList;
    private List<JButton> clickedButtons;

    private final int NUMBER_OF_BUTTONS = 16;
    private final int DESIRED_WIDTH = 448;
    private int clickCount = 0;
    private int trueCount = 0;
    static int score;

    dosyaSec dSec = new dosyaSec();
    ImageIcon icon;
    ScoreKayit scoreK = new ScoreKayit();

    public puzzleAna() throws IOException {
        initComponents();
        resimBol();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        karistirButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        skorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );

        karistirButton.setText("KARISTIR");
        karistirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                karistirButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel1.setText("En yuksek skor:   ");

        skorLabel.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        skorLabel.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(karistirButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(karistirButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(skorLabel)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void karistirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_karistirButtonActionPerformed
        Collections.shuffle(buttons);
        checkCurrent();
        updateButtons();
    }//GEN-LAST:event_karistirButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public void resimBol() throws IOException {
        pointList = new ArrayList<>();

        pointList.add(new Point(0, 0));
        pointList.add(new Point(0, 1));
        pointList.add(new Point(0, 2));
        pointList.add(new Point(0, 3));
        pointList.add(new Point(1, 0));
        pointList.add(new Point(1, 1));
        pointList.add(new Point(1, 2));
        pointList.add(new Point(1, 3));
        pointList.add(new Point(2, 0));
        pointList.add(new Point(2, 1));
        pointList.add(new Point(2, 2));
        pointList.add(new Point(2, 3));
        pointList.add(new Point(3, 0));
        pointList.add(new Point(3, 1));
        pointList.add(new Point(3, 2));
        pointList.add(new Point(3, 3));

        buttons = new ArrayList<>();
        pixelList = new ArrayList<>();
        piecesList = new ArrayList<>();
        clickedButtons = new ArrayList<>();

        buttonPanel.setBorder(BorderFactory.createLineBorder(Color.white));
        buttonPanel.setLayout(new GridLayout(4, 4, 0, 0));

        scoreK.DosyaOku();
        skorLabel.setText(Integer.toString(scoreK.enYuksekSkor()));
        int rgb;
        try {
            source = resimAl(dSec.filePath); 
            imageControl(source, source.getWidth(), source.getHeight(), BufferedImage.TYPE_INT_ARGB);
            int h = yenileYukseklik(source.getWidth(), source.getHeight()); //System.out.println(h);
            resized = yeniBoyutImage(source, DESIRED_WIDTH, h,
                    BufferedImage.TYPE_INT_ARGB);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Could not load image", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        width = resized.getWidth();
        height = resized.getHeight();
        //System.out.println("w: " + source.getWidth() + ", h:" + source.getHeight());

        add(buttonPanel, BorderLayout.CENTER);

        int buttonNumber = 0;
        BufferedImage srcToImage;
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {

                image = createImage(new FilteredImageSource(resized.getSource(),
                        new CropImageFilter(j * width / 4, i * height / 4,
                                (width / 4), height / 4)));
                //save(toBufferedImage(image), "jpg", buttonNumber);
                srcToImage = toBufferedImage(image);
                for (int k = 0; k < width / 4; k++) {
                    for (int l = 0; l < height / 4; l++) {
                        rgb = toBufferedImage(image).getRGB(k, l);
                        pixelList.add(rgb);
                        //System.out.println(sayac1 + ") " + piecesList.get(sayac1) + "   ,   " + srcToImage.getRGB(k, l));
                    }
                    //System.out.println( toBufferedImage(image).getRGB(0,0) );
                }
                //System.out.println("");
                buttons.add(new JButton());
                icon = new ImageIcon(image);
                icon.setDescription("" + (buttonNumber + 1));
                buttons.get(buttonNumber).setIcon(icon);

                buttons.get(buttonNumber).putClientProperty("position", new Point(i, j));

                buttonNumber++;
            }
        }

        Collections.shuffle(buttons);
        int i;//, j = 0, k, l, pieceCount = 0; // pieceCount, butondan alinan parca kontrolu icin
        Image img;

        for (i = 0; i < NUMBER_OF_BUTTONS; i++) {
            JButton btn = buttons.get(i);
            buttonPanel.add(btn);

            img = ((ImageIcon) buttons.get(i).getIcon()).getImage();
            srcToImage = toBufferedImage(img);
            //System.out.println("++  " +srcToImage.getRGB(0, 0));
            for (k = 0; k < width / 4; k++) {
                for (l = 0; l < height / 4; l++) {
                    rgb = toBufferedImage(img).getRGB(k, l);
                    piecesList.add(rgb);
                    //System.out.println(sayac + ") " + piecesList.get(sayac) + "   ,   " + srcToImage.getRGB(k, l));
                }
                //System.out.println( toBufferedImage(image).getRGB(0,0) );
            }
            for (j = j; j < (int) (Math.pow((width / 4), 2) * (i + 1)); j++) {
                //System.out.print("j)" + j + ", " + Math.pow((width / 4), 2) * (i + 1));
                //System.out.println("-- " + pixelList.get(j) + "," + piecesList.get(pieceCount) + "   " + Objects.equals(pixelList.get(j), piecesList.get(pieceCount)));
                if (Objects.equals(pixelList.get(j), piecesList.get(pieceCount))) {
                    //System.out.println("pieceCountIF: " + pieceCount + " , " + (int) (Math.pow((width / 4), 2)));
                    //System.out.println(pieceCount +" , "+ (int) (Math.pow((width / 4), 2)));
                    if (pieceCount + 1 == (int) (Math.pow((width / 4), 2))) {
                        System.out.println("getDescription" + ((ImageIcon) buttons.get(i).getIcon()).getDescription());
                        trueCount++;
                        //JOptionPane.showMessageDialog(buttonPanel, ((ImageIcon) buttons.get(i).getIcon()).getDescription() + ". resim dogru konumdadir.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
                        karistirButton.setVisible(false);
                    }
                } else {
                    j = (int) (Math.pow((width / 4), 2) * (i + 1)) - 1;
                    //System.out.println("j: " + j);
                }
                pieceCount++;   //System.out.print(",    pieceCount: " + pieceCount);
            }
            //System.out.println("pieceCount: " + pieceCount);
            pieceCount = 0;
            piecesList.clear();

            btn.setBorder(BorderFactory.createLineBorder(Color.white));
            btn.addActionListener((ActionListener) new ClickAction());
        }
        setTitle("Puzzle");
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private BufferedImage resimAl(String puzzleImage) throws IOException {
        BufferedImage bimg = ImageIO.read(new File(puzzleImage));
        return bimg;
    }

    private int yenileYukseklik(int width, int height) {
        double ratio = DESIRED_WIDTH / (double) width;
        int yeniYukseklik = (int) (height * ratio);
        System.out.println("yeniYukseklik: " + yeniYukseklik);
        return yeniYukseklik;
    }

    private BufferedImage yeniBoyutImage(BufferedImage originalImage, int width,
            int height, int type) {

        BufferedImage yeniBoyutImage = new BufferedImage(width, height, type);
        Graphics2D g = yeniBoyutImage.createGraphics();
        g.drawImage(originalImage, 0, 0, width, height, null);
        g.dispose();

        return yeniBoyutImage;
    }

    private BufferedImage imageControl(BufferedImage originalImage, int width, int height, int type) throws IOException {
        BufferedImage yeniBoyutImage = null;
        Graphics2D g;
        
        if (width != height) {
            if (width < height) {
                yeniBoyutImage = new BufferedImage(width, width, type);
                g = yeniBoyutImage.createGraphics();
                g.drawImage(originalImage, 0, 0, width, width, null);
                save(yeniBoyutImage, "jpg", 0);
                source = resimAl("savingAnImage0.jpg");
                //System.out.println("imgC w, h: " +source.getWidth()+", "+ source.getHeight());
            } else {
                yeniBoyutImage = new BufferedImage(height, height, type);
                g = yeniBoyutImage.createGraphics();
                g.drawImage(originalImage, 0, 0, height, height, null);
                save(yeniBoyutImage, "jpg", 0);
                source = resimAl("savingAnImage0.jpg");
                //System.out.println("imgC w, h: " +source.getWidth()+", "+ source.getHeight());
            }
            g.dispose();
        }
        return yeniBoyutImage;
    }

    private void updateButtons() {
        buttonPanel.removeAll();

        for (JComponent btn : buttons) {
            buttonPanel.add(btn);
        }
        buttonPanel.validate();
    }

    private class ClickAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            clickedButtons.add((JButton) e.getSource());
            //System.out.println("ClickAction: " + buttons.indexOf(clickedButtons.get(0)));
            //System.out.println("getDescription" + ((ImageIcon) ((JButton) e.getSource()).getIcon()).getDescription());
            try {
                checkButton(e);
            } catch (IOException ex) {
                Logger.getLogger(puzzleAna.class.getName()).log(Level.SEVERE, null, ex);
            }
            //checkCurrent(); //System.out.println("trueCount:" +trueCount);
        }

        private void checkButton(ActionEvent e) throws IOException {
            //System.out.println("checkButton girdi");
            clickCount++;
            if (clickCount % 2 == 0) {
                //System.out.println("clickCount: " + clickCount);            
                Collections.swap(buttons, buttons.indexOf(clickedButtons.get(0)), buttons.indexOf(clickedButtons.get(1)));
                updateButtons();
                clickedButtons.clear();
                checkCurrent();
            }
        }

        private void updateButtons() {
            buttonPanel.removeAll();

            for (JComponent btn : buttons) {
                buttonPanel.add(btn);
            }
            buttonPanel.validate();
        }
    }

    private int scoreHesapla() {
        score = trueCount * 7 - (clickCount - trueCount) * 3;
        System.out.println("trueCount: " + trueCount + " clickCount: " + clickCount + "score: " + score);
        if (score > 100) {
            return 100;
        } else if (score < 0) {
            return 0;
        } else {
            return score;
        }
    }

    private static BufferedImage toBufferedImage(Image src) {
        int w = src.getWidth(null); //System.out.println("w: " +w);
        int h = src.getHeight(null);    //System.out.println("h: " +h);
        int type = BufferedImage.TYPE_INT_RGB; // other options 
        BufferedImage dest = new BufferedImage(w, h, type);
        Graphics2D g2 = dest.createGraphics();
        g2.drawImage(src, 0, 0, null);
        g2.dispose();
        return dest;
    }

    private static void save(BufferedImage image, String ext, int sayac) {
        String fileName = "savingAnImage" + sayac;
        File file = new File(fileName + "." + ext);
        try {
            ImageIO.write(image, ext, file); // ignore returned boolean 
        } catch (IOException e) {
            System.out.println("Write error for " + file.getPath() + ":" + e.getMessage());
        }
    }

    int i = 0, j = 0, k, l, rgb, pieceCount = 0, sayac = 0; // pieceCount, butondan alinan parca kontrolu icin
    Image img;
    BufferedImage srcToImage;

    private void checkCurrent() {
        j = 0;
        for (i = 0; i < NUMBER_OF_BUTTONS; i++) {
            img = ((ImageIcon) buttons.get(i).getIcon()).getImage();
            srcToImage = toBufferedImage(img);
            //System.out.println("++  " +srcToImage.getRGB(0, 0));
            for (k = 0; k < width / 4; k++) {
                for (l = 0; l < height / 4; l++) {
                    rgb = toBufferedImage(img).getRGB(k, l);
                    piecesList.add(rgb);
                    //System.out.println(sayac + ") " + piecesList.get(sayac) + "   ,   " + srcToImage.getRGB(k, l));
                }
                //System.out.println( toBufferedImage(image).getRGB(0,0) );
            }
            sayac = 0;

            if (clickCount % 2 == 0) {
                for (j = j; j < (int) (Math.pow((width / 4), 2) * (i + 1)); j++) {
                    //System.out.print("j)" + j + ", " + Math.pow((width / 4), 2) * (i + 1));
                    //System.out.println("-- " + pixelList.get(j) + "," + piecesList.get(pieceCount) + "   " + Objects.equals(pixelList.get(j), piecesList.get(pieceCount)));
                    if (Objects.equals(pixelList.get(j), piecesList.get(pieceCount))) {
                        //System.out.println("pieceCountIF: " + pieceCount + " , " + (int) (Math.pow((width / 4), 2)));
                        //System.out.println(pieceCount +" , "+ (int) (Math.pow((width / 4), 2)));
                        if ((pieceCount + 1) == (int) (Math.pow((width / 4), 2))) {
                            //System.out.println("Dogru konum getDescription" + ((ImageIcon) buttons.get(i).getIcon()).getDescription());
                            karistirButton.setVisible(false);
                            trueCount++;    //System.out.println("trueCount: " +trueCount);
                            if (trueCount == 16) {
                                scoreK.DosyayaEkle(scoreHesapla());
                                System.out.println("score:" + score);
                                JOptionPane.showMessageDialog(buttonPanel, "Puzzle Tamamlandi. Skorunuz: " + score, "TEBRIKLER.", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } else {
                        j = (int) (Math.pow((width / 4), 2) * (i + 1)) - 1;
                        //System.out.println("j: " + j);
                    }
                    pieceCount++;   //System.out.print(",    pieceCount: " + pieceCount);
                }
                //System.out.println("pieceCount: " + pieceCount);
                pieceCount = 0;
                piecesList.clear();
            }
        }
        trueCount = 0;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(puzzleAna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(puzzleAna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(puzzleAna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(puzzleAna.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new puzzleAna().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(puzzleAna.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton karistirButton;
    private javax.swing.JLabel skorLabel;
    // End of variables declaration//GEN-END:variables
}
